name: Backend CD - Deploy to AKS

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'k8s/**'
      - '.github/workflows/backend-cd.yml'

env:
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  CLUSTER_NAME: ${{ secrets.AZURE_AKS_CLUSTER }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  NAMESPACE: default

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Azure Login
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get AKS Credentials
      - name: Set up AKS credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      # Create namespace if not exists
      - name: Ensure namespace exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # Apply Secrets & ConfigMap
      - name: Apply Secrets and ConfigMap
        run: |
          kubectl apply -f k8s/secrets.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/postgres-configmap.yaml -n ${{ env.NAMESPACE }}

      # Apply Postgres DB
      - name: Apply Postgres
        run: kubectl apply -f k8s/postgres.yaml -n ${{ env.NAMESPACE }}

      # Deploy Backend Services
      - name: Deploy Customer Service
        run: kubectl apply -f k8s/customer-deployment.yaml -n ${{ env.NAMESPACE }}

      - name: Deploy Order Service
        run: kubectl apply -f k8s/order-deployment.yaml -n ${{ env.NAMESPACE }}

      - name: Deploy Product Service
        run: kubectl apply -f k8s/product-deployment.yaml -n ${{ env.NAMESPACE }}

      # Restart Deployments (pulls latest images from ACR)
      - name: Restart backend deployments
        run: |
          kubectl rollout restart deployment/customer-service -n ${{ env.NAMESPACE }}
          kubectl rollout restart deployment/order-service -n ${{ env.NAMESPACE }}
          kubectl rollout restart deployment/product-service -n ${{ env.NAMESPACE }}

      # Verify
      - name: Verify pods
        run: kubectl get pods -n ${{ env.NAMESPACE }}

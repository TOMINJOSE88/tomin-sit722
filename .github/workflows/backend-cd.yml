name: Backend CD - Deploy to AKS

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'k8s/**'
      - '.github/workflows/backend-cd.yml'

env:
  NAMESPACE: default
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Get AKS Context (use secrets directly, not env)
      - name: Set up AKS credentials
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AZURE_AKS_CLUSTER }}

      # Ensure namespace exists
      - name: Ensure namespace exists
        run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      # Apply secrets and configmaps
      - name: Apply Secrets and ConfigMap
        run: |
          kubectl apply -f k8s/secrets.yaml -n ${{ env.NAMESPACE }}
          kubectl apply -f k8s/postgres-configmap.yaml -n ${{ env.NAMESPACE }}

      # Apply Postgres
      - name: Apply Postgres
        run: kubectl apply -f k8s/postgres.yaml -n ${{ env.NAMESPACE }}

      # Deploy backend microservices
      - name: Deploy Customer Service
        run: kubectl apply -f k8s/customer-deployment.yaml -n ${{ env.NAMESPACE }}

      - name: Deploy Order Service
        run: kubectl apply -f k8s/order-deployment.yaml -n ${{ env.NAMESPACE }}

      - name: Deploy Product Service
        run: kubectl apply -f k8s/product-deployment.yaml -n ${{ env.NAMESPACE }}

      # Force pods to pull latest images
      - name: Restart backend deployments
        run: |
          kubectl rollout restart deployment/customer-service -n ${{ env.NAMESPACE }}
          kubectl rollout restart deployment/order-service -n ${{ env.NAMESPACE }}
          kubectl rollout restart deployment/product-service -n ${{ env.NAMESPACE }}

      # Verify rollout
      - name: Verify backend deployments
        run: |
          kubectl rollout status deployment/customer-service -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/order-service -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/product-service -n ${{ env.NAMESPACE }}
          kubectl get pods -n ${{ env.NAMESPACE }}

name: Staging CD Pipeline

on:
  push:
    branches:
      - testing

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  ACR_NAME: ${{ secrets.AZURE_ACR_NAME }}
  CUSTOMER_IMAGE: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/customer_service:${{ github.sha }}-${{ github.run_id }}
  PRODUCT_IMAGE:  ${{ secrets.AZURE_CONTAINER_REGISTRY }}/product_service:${{ github.sha }}-${{ github.run_id }}
  ORDER_IMAGE:    ${{ secrets.AZURE_CONTAINER_REGISTRY }}/order_service:${{ github.sha }}-${{ github.run_id }}
  FRONTEND_IMAGE: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/frontend:${{ github.sha }}-${{ github.run_id }}

jobs:
  staging:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # --- Login to Azure ---
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # --- Get AKS creds for kubectl & terraform ---
      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group ecom-rg --name ecom-aks --overwrite-existing

      # --- Setup Terraform ---
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform -chdir=infra/staging init

      - name: Terraform Plan
        run: |
          terraform -chdir=infra/staging plan \
            -var="customer_image=${{ env.CUSTOMER_IMAGE }}" \
            -var="product_image=${{ env.PRODUCT_IMAGE }}" \
            -var="order_image=${{ env.ORDER_IMAGE }}" \
            -var="frontend_image=${{ env.FRONTEND_IMAGE }}" \
            -var="run_id=${{ github.run_id }}"

      - name: Terraform Apply - Create Staging Infra
        run: |
          terraform -chdir=infra/staging apply -auto-approve \
            -var="customer_image=${{ env.CUSTOMER_IMAGE }}" \
            -var="product_image=${{ env.PRODUCT_IMAGE }}" \
            -var="order_image=${{ env.ORDER_IMAGE }}" \
            -var="frontend_image=${{ env.FRONTEND_IMAGE }}" \
            -var="run_id=${{ github.run_id }}"

      # --- Wait for deployments to roll out ---
      - name: Wait for Rollout
        run: |
          kubectl rollout status deployment/customer -n staging-${{ github.run_id }} --timeout=180s
          kubectl rollout status deployment/product -n staging-${{ github.run_id }} --timeout=180s
          kubectl rollout status deployment/order -n staging-${{ github.run_id }} --timeout=180s
          kubectl rollout status deployment/frontend -n staging-${{ github.run_id }} --timeout=180s

      # --- Debug: Check pods and services ---
      - name: Check Pods
        run: |
          kubectl get pods -A
          kubectl get svc -A
          kubectl get ingress -A

      # --- Simple smoke test via Ingress ---
      - name: Smoke Test
        continue-on-error: true
        run: |
          echo "Waiting for ingress to become available..."
          sleep 120
          INGRESS_IP=$(terraform -chdir=infra/staging output -raw staging_ingress_ip)
          echo "Ingress IP: $INGRESS_IP"

          echo "Testing frontend..."
          curl -v http://$INGRESS_IP/ || exit 1

          echo "Testing customer..."
          curl -v http://$INGRESS_IP/customer || exit 1

          echo "Testing product..."
          curl -v http://$INGRESS_IP/product || exit 1

          echo "Testing order..."
          curl -v http://$INGRESS_IP/order || exit 1

      # --- Destroy Staging Infra ---
      - name: Terraform Destroy
        if: always()
        run: |
          terraform -chdir=infra/staging destroy -auto-approve \
            -var="customer_image=${{ env.CUSTOMER_IMAGE }}" \
            -var="product_image=${{ env.PRODUCT_IMAGE }}" \
            -var="order_image=${{ env.ORDER_IMAGE }}" \
            -var="frontend_image=${{ env.FRONTEND_IMAGE }}" \
            -var="run_id=${{ github.run_id }}"
